openapi: 3.0.3
info:
  title: Fraud Scoring API
  description: |
    REST API for the Fraud Scoring System that provides endpoints for transaction analysis,
    fraud detection, and scoring services. This API complements the gRPC services and
    provides HTTP-based access to core functionality.
  version: "1.0.0"
  contact:
    name: Fraud Scoring Team
    email: fraud-scoring@company.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.fraud-scoring.company.com/v1
    description: Production server
  - url: https://staging-api.fraud-scoring.company.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Development server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the fraud scoring service
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /score/transaction:
    post:
      summary: Score a transaction
      description: Analyze a transaction and return fraud scoring results
      operationId: scoreTransaction
      tags:
        - Scoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionScoringRequest'
      responses:
        '200':
          description: Transaction scoring completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringResult'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{document}/transactions/average:
    get:
      summary: Get user's monthly transaction average
      description: Retrieve the monthly average transaction amount for a specific user
      operationId: getUserMonthlyAverage
      tags:
        - Users
      parameters:
        - name: document
          in: path
          required: true
          description: User document identifier
          schema:
            type: string
            example: "12345678901"
        - name: month
          in: query
          required: true
          description: Month in YYYY-MM format
          schema:
            type: string
            pattern: '^\d{4}-\d{2}$'
            example: "2024-01"
      responses:
        '200':
          description: Monthly average retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMonthlyAverage'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{document}/transactions/last:
    get:
      summary: Get user's last transaction
      description: Retrieve the most recent transaction for a specific user
      operationId: getUserLastTransaction
      tags:
        - Users
      parameters:
        - name: document
          in: path
          required: true
          description: User document identifier
          schema:
            type: string
            example: "12345678901"
      responses:
        '200':
          description: Last transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTransaction'
        '404':
          description: User or transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /metrics:
    get:
      summary: Get service metrics
      description: Retrieve operational metrics for the fraud scoring service
      operationId: getMetrics
      tags:
        - Monitoring
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          example: healthy
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        version:
          type: string
          example: "1.0.0"
        dependencies:
          type: object
          properties:
            kafka:
              type: string
              enum: [healthy, unhealthy]
              example: healthy
            grpc:
              type: string
              enum: [healthy, unhealthy]
              example: healthy
      required:
        - status
        - timestamp
        - version

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request parameters"
        code:
          type: string
          example: "INVALID_REQUEST"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        details:
          type: object
          additionalProperties: true
      required:
        - error
        - code
        - timestamp

    TransactionScoringRequest:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/TransactionAnalysis'
      required:
        - transaction

    TransactionAnalysis:
      type: object
      properties:
        participants:
          $ref: '#/components/schemas/Participants'
        order:
          $ref: '#/components/schemas/Checkout'
        payment:
          $ref: '#/components/schemas/Payment'
      required:
        - participants
        - order
        - payment

    Participants:
      type: object
      properties:
        buyer:
          $ref: '#/components/schemas/BuyerInfo'
        seller:
          $ref: '#/components/schemas/SellerInfo'
      required:
        - buyer
        - seller

    BuyerInfo:
      type: object
      properties:
        document:
          type: string
          example: "12345678901"
        name:
          type: string
          example: "John Doe"
      required:
        - document
        - name

    SellerInfo:
      type: object
      properties:
        sellerId:
          type: string
          example: "seller-123"
      required:
        - sellerId

    Checkout:
      type: object
      properties:
        id:
          type: string
          example: "checkout-456"
        paymentType:
          $ref: '#/components/schemas/CardInfo'
        at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - paymentType
        - at

    Payment:
      type: object
      properties:
        id:
          type: string
          example: "payment-789"
        amount:
          type: string
          example: "100.50"
        currency:
          type: string
          example: "USD"
        status:
          type: string
          enum: [pending, completed, failed, cancelled]
          example: "completed"
      required:
        - id
        - amount
        - currency
        - status

    CardInfo:
      type: object
      properties:
        cardInfo:
          type: string
          example: "****1234"
        token:
          type: string
          example: "tok_1234567890"
      required:
        - cardInfo
        - token

    ScoringResult:
      type: object
      properties:
        score:
          $ref: '#/components/schemas/ScoreCard'
        transaction:
          $ref: '#/components/schemas/TransactionAnalysis'
        riskLevel:
          type: string
          enum: [low, medium, high, critical]
          example: "medium"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - score
        - transaction
        - riskLevel
        - timestamp

    ScoreCard:
      type: object
      properties:
        valueScore:
          $ref: '#/components/schemas/ValueScoreCard'
        sellerScore:
          $ref: '#/components/schemas/SellerScoreCard'
        averageValueScore:
          $ref: '#/components/schemas/AverageValueScoreCard'
        currencyScore:
          $ref: '#/components/schemas/CurrencyScoreCard'
        overallScore:
          type: integer
          minimum: 0
          maximum: 100
          example: 75
      required:
        - valueScore
        - sellerScore
        - averageValueScore
        - currencyScore
        - overallScore

    ValueScoreCard:
      type: object
      properties:
        score:
          type: integer
          minimum: 0
          maximum: 100
          example: 80
        factors:
          type: array
          items:
            type: string
          example: ["amount_within_normal_range", "currency_stable"]
      required:
        - score

    SellerScoreCard:
      type: object
      properties:
        score:
          type: integer
          minimum: 0
          maximum: 100
          example: 85
        factors:
          type: array
          items:
            type: string
          example: ["high_reputation", "verified_seller"]
      required:
        - score

    AverageValueScoreCard:
      type: object
      properties:
        score:
          type: integer
          minimum: 0
          maximum: 100
          example: 70
        factors:
          type: array
          items:
            type: string
          example: ["above_user_average", "within_historical_range"]
      required:
        - score

    CurrencyScoreCard:
      type: object
      properties:
        score:
          type: integer
          minimum: 0
          maximum: 100
          example: 90
        factors:
          type: array
          items:
            type: string
          example: ["stable_currency", "supported_region"]
      required:
        - score

    UserMonthlyAverage:
      type: object
      properties:
        document:
          type: string
          example: "12345678901"
        month:
          type: string
          example: "2024-01"
        total:
          type: string
          example: "1250.75"
        transactionCount:
          type: integer
          example: 15
        average:
          type: string
          example: "83.38"
      required:
        - document
        - month
        - total
        - transactionCount
        - average

    UserTransaction:
      type: object
      properties:
        document:
          type: string
          example: "12345678901"
        sellerId:
          type: string
          example: "seller-123"
        currency:
          type: string
          example: "USD"
        value:
          type: string
          example: "100.50"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - document
        - sellerId
        - currency
        - value
        - timestamp

    MetricsResponse:
      type: object
      properties:
        transactions:
          type: object
          properties:
            total:
              type: integer
              example: 10000
            scored:
              type: integer
              example: 9950
            failed:
              type: integer
              example: 50
        scoring:
          type: object
          properties:
            averageProcessingTime:
              type: number
              example: 45.5
            riskDistribution:
              type: object
              properties:
                low:
                  type: integer
                  example: 7500
                medium:
                  type: integer
                  example: 2000
                high:
                  type: integer
                  example: 400
                critical:
                  type: integer
                  example: 50
        system:
          type: object
          properties:
            uptime:
              type: number
              example: 99.9
            lastRestart:
              type: string
              format: date-time
              example: "2024-01-14T08:00:00Z"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - ApiKeyAuth: []
  - BearerAuth: []

tags:
  - name: Health
    description: Health check operations
  - name: Scoring
    description: Transaction scoring operations
  - name: Users
    description: User-related operations
  - name: Monitoring
    description: Monitoring and metrics operations